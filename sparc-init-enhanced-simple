#!/bin/bash

# SPARC Enhanced Initialization Script - Simplified Version
# Comprehensive setup for autonomous development with 36 AI agents

export SPARC_HOME="/usr/local/sparc"
export ORIGINAL_DIR="$(pwd)"
export SPARC_VERSION="2.0-enhanced"

echo -e "\033[0;36m\033[1m"
echo "╔══════════════════════════════════════════════════════════════════════╗"
echo "║  🚀 SPARC ENHANCED AUTONOMOUS DEVELOPMENT SYSTEM ✨               ║"
echo "║                                                                      ║"
echo "║  🧠 36 AI Agents  🗄️ Memory System  ⚙️ Full Infrastructure         ║"
echo "║  Version: 2.0-enhanced                                              ║"
echo "╚══════════════════════════════════════════════════════════════════════╝"
echo -e "\033[0m"

cd "$SPARC_HOME"

python3 -c """
import asyncio
import sys
import os
import json
import subprocess
import time
import uuid
import hashlib
import shutil
from pathlib import Path
from datetime import datetime

# Enhanced imports
try:
    import inquirer
    HAS_INQUIRER = True
except ImportError:
    HAS_INQUIRER = False
    print('⚠️ Installing inquirer for enhanced user experience...')
    subprocess.run([sys.executable, '-m', 'pip', 'install', 'inquirer'], check=True)
    import inquirer
    HAS_INQUIRER = True

# Project types and templates
PROJECT_TYPES = {
    'web_app': {
        'name': '🌐 Web Application',
        'description': 'React/Vue/Angular frontend with backend API',
        'tech_stack': ['React', 'FastAPI', 'PostgreSQL'],
        'directories': ['frontend', 'backend', 'database', 'docs']
    },
    'api_service': {
        'name': '🔌 API Service', 
        'description': 'REST/GraphQL API with database',
        'tech_stack': ['FastAPI', 'PostgreSQL', 'Redis'],
        'directories': ['api', 'models', 'services', 'tests', 'docs']
    },
    'cli_tool': {
        'name': '⚡ CLI Tool',
        'description': 'Command-line application',
        'tech_stack': ['Python', 'Click', 'SQLite'],
        'directories': ['cli', 'core', 'utils', 'tests', 'docs']
    },
    'custom': {
        'name': '🎯 Custom Project',
        'description': 'Define your own architecture',
        'tech_stack': [],
        'directories': ['src', 'tests', 'docs']
    }
}

# Enhanced configuration
ENHANCED_CONFIG_DIR = Path.home() / '.sparc' / 'enhanced'
RECENT_PROJECTS_FILE = ENHANCED_CONFIG_DIR / 'recent_projects.json'

def log_infrastructure(message):
    '''Log infrastructure setup steps'''
    ENHANCED_CONFIG_DIR.mkdir(parents=True, exist_ok=True)
    timestamp = datetime.now().isoformat()
    log_file = ENHANCED_CONFIG_DIR / 'infrastructure.log'
    with open(log_file, 'a') as f:
        f.write(f'[{timestamp}] {message}' + chr(10))
    print(f'ℹ️ {message}')

def show_enhanced_banner():
    '''Display enhanced welcome banner'''
    print('\\033[0;36m\\033[1m')
    print('┌─ SPARC ENHANCED SETUP ─────────────────────────────────────────────┐')
    print('│                                                                     │')
    print('│  This enhanced initialization will set up:                         │')
    print('│  ✅ 36 Specialized AI Agents                                        │')
    print('│  ✅ External Memory System (Supabase + Qdrant)                      │')
    print('│  ✅ BMO Framework (Behavior-Model-Oracle)                          │')
    print('│  ✅ Context7 MCP Integration                                       │')
    print('│  ✅ Claude Code Hooks & Commands                                   │')
    print('│  ✅ Complete Infrastructure Automation                             │')
    print('│                                                                     │')
    print('└─────────────────────────────────────────────────────────────────────┘')
    print('\\033[0m')

def check_prerequisites():
    '''Enhanced prerequisites check'''
    print('⚙️ Checking system prerequisites...')
    
    checks = {
        'python': False,
        'docker': False,
        'curl': False,
        'git': False,
        'claude_code': False
    }
    
    # Check Python
    try:
        result = subprocess.run([sys.executable, '--version'], capture_output=True, text=True)
        if result.returncode == 0:
            checks['python'] = True
            log_infrastructure(f'Python: {result.stdout.strip()}')
    except:
        pass
    
    # Check Docker
    try:
        result = subprocess.run(['docker', '--version'], capture_output=True, text=True)
        if result.returncode == 0:
            docker_ps = subprocess.run(['docker', 'ps'], capture_output=True, text=True)
            checks['docker'] = docker_ps.returncode == 0
            log_infrastructure(f'Docker: {result.stdout.strip()}')
    except:
        pass
    
    # Check other tools
    for tool in ['curl', 'git']:
        try:
            result = subprocess.run([tool, '--version'], capture_output=True, text=True)
            checks[tool] = result.returncode == 0
        except:
            pass
    
    # Check Claude Code
    try:
        result = subprocess.run(['claude', '--version'], capture_output=True, text=True)
        checks['claude_code'] = result.returncode == 0
        if checks['claude_code']:
            log_infrastructure('Claude Code: Available')
    except:
        pass
    
    # Display results
    for tool, available in checks.items():
        status = '✅' if available else '❌'
        print(f'{status} {tool.replace("_", " ").title()}: {"Available" if available else "Missing"}')
    
    missing = [tool for tool, available in checks.items() if not available]
    if missing:
        print('⚠️ Missing prerequisites:')
        for tool in missing:
            if tool == 'docker':
                print('  • Install Docker: https://docs.docker.com/get-docker/')
            elif tool == 'claude_code':
                print('  • Install Claude Code: https://claude.ai/code')
        
        if 'docker' in missing or 'claude_code' in missing:
            cont = input('\\nContinue without missing tools? (y/N): ')
            if cont.lower() != 'y':
                return False
    
    return True

def get_project_goal():
    '''Interactive project goal definition'''
    print('🧠 Let us define your project goal...')
    print()
    
    # Project type selection
    type_choices = [f'{details["name"]} - {details["description"]}' 
                   for details in PROJECT_TYPES.values()]
    
    questions = [
        inquirer.List('project_type',
                     message='What type of project are you building?',
                     choices=type_choices,
                     carousel=True)
    ]
    
    answers = inquirer.prompt(questions)
    if not answers:
        return None
    
    # Extract project type key
    selected_name = answers['project_type'].split(' - ')[0]
    project_type = None
    for key, details in PROJECT_TYPES.items():
        if details['name'] == selected_name:
            project_type = key
            break
    
    # Get project goal description
    goal = input('\\n✨ Describe your project goal in detail: ')
    if not goal.strip():
        goal = 'New SPARC autonomous development project'
    
    return {
        'type': project_type,
        'goal': goal,
        'tech_stack': PROJECT_TYPES[project_type]['tech_stack']
    }

def setup_enhanced_infrastructure(project_path, namespace):
    '''Set up complete infrastructure'''
    print('🗄️ Setting up enhanced infrastructure...')
    
    # Setup Qdrant
    log_infrastructure('Setting up Qdrant vector database...')
    try:
        result = subprocess.run(['docker', 'ps', '-a', '--filter', 'name=sparc-qdrant-enhanced'], 
                              capture_output=True, text=True)
        
        if 'sparc-qdrant-enhanced' in result.stdout:
            log_infrastructure('Qdrant container exists, restarting...')
            subprocess.run(['docker', 'restart', 'sparc-qdrant-enhanced'], check=True)
        else:
            log_infrastructure('Creating new Qdrant container...')
            subprocess.run([
                'docker', 'run', '-d',
                '--name', 'sparc-qdrant-enhanced',
                '-p', '6336:6333',
                '-v', 'sparc_qdrant_data:/qdrant/storage',
                'qdrant/qdrant'
            ], check=True)
        
        time.sleep(3)
        log_infrastructure('Qdrant: Setup complete')
        
    except subprocess.CalledProcessError as e:
        log_infrastructure(f'Qdrant setup failed: {e}')
    
    # Setup Supabase configuration
    log_infrastructure('Setting up Supabase configuration...')
    
    # Create enhanced .env template
    env_content = f'''# SPARC Enhanced Project Configuration
# Generated: {datetime.now().isoformat()}

# Project Information
PROJECT_NAMESPACE={namespace}
PROJECT_TYPE=enhanced_sparc
SPARC_VERSION={os.environ.get('SPARC_VERSION', '2.0-enhanced')}

# Supabase Configuration
SUPABASE_URL=https://your-project.supabase.co
SUPABASE_ANON_KEY=your-anon-key-here
SUPABASE_SERVICE_KEY=your-service-key-here

# Vector Database (Qdrant)
QDRANT_URL=http://localhost:6336
QDRANT_API_KEY=
QDRANT_COLLECTION_PREFIX={namespace}

# AI API Keys
ANTHROPIC_API_KEY=
OPENAI_API_KEY=
MISTRAL_API_KEY=

# Memory System Configuration
MEMORY_PROVIDER=supabase
VECTOR_PROVIDER=qdrant
CONTEXT_WINDOW_SIZE=100000
MEMORY_ISOLATION=true

# Agent System Configuration
AGENT_SYSTEM_ENABLED=true
BMO_FRAMEWORK_ENABLED=true
CONTEXT7_MCP_ENABLED=true
AUTONOMOUS_MODE=true

# Development Configuration
DEBUG=true
LOG_LEVEL=INFO
ENVIRONMENT=development
'''
    
    env_path = Path(project_path) / '.env'
    env_path.write_text(env_content)
    log_infrastructure('Created enhanced environment configuration')
    
    return True

def setup_claude_integration(project_path, namespace):
    '''Setup Claude Code integration'''
    log_infrastructure('Setting up Claude Code integration...')
    
    # Create .claude directory structure
    claude_dir = Path(project_path) / '.claude'
    claude_dir.mkdir(exist_ok=True)
    
    # Copy enhanced commands
    commands_source = Path('/usr/local/sparc/claude-commands')
    commands_dest = claude_dir / 'commands'
    
    if commands_source.exists():
        shutil.copytree(commands_source, commands_dest, dirs_exist_ok=True)
        log_infrastructure('Copied enhanced Claude commands')
    
    # Setup hooks
    hooks_source = Path('/usr/local/sparc/hooks/sparc-memory-hooks.json')
    hooks_dest = claude_dir / 'claude_hooks_config.json'
    
    if hooks_source.exists():
        shutil.copy2(hooks_source, hooks_dest)
        log_infrastructure('Configured memory hooks')
    
    return True

def create_enhanced_claude_md(project_path, namespace, project_config):
    '''Create enhanced CLAUDE.md'''
    tech_stack_str = ', '.join(project_config.get('tech_stack', []))
    
    claude_content = f'''# SPARC Enhanced Autonomous Development Project

project_id: {namespace}

## Project Overview

**Goal**: {project_config.get('goal', 'Enhanced SPARC autonomous development')}
**Type**: {PROJECT_TYPES.get(project_config.get('type', 'custom'), {}).get('name', 'Custom Project')}

## Technical Configuration

- **Namespace**: `{namespace}` (Complete isolation)
- **Technology Stack**: {tech_stack_str}
- **Infrastructure**: Supabase + Qdrant + Docker
- **AI System**: 36 specialized agents
- **Framework**: BMO (Behavior-Model-Oracle)
- **Memory**: External unlimited context

## Enhanced Capabilities

✨ **36 AI Agents**: Complete autonomous development workflow
🧠 **External Memory**: Unlimited context with Supabase + Qdrant  
🔍 **BMO Framework**: Behavior-Model-Oracle validation
🔗 **Context7 MCP**: Advanced context management
🎯 **Memory Isolation**: Complete namespace separation
⚡ **Enhanced Hooks**: Real-time memory integration
🚀 **Autonomous Mode**: Full workflow automation

## Development Workflow

1. **Use `/sparc` command** to start autonomous development
2. **Agent System** handles complete specification → deployment
3. **Memory System** maintains unlimited context
4. **BMO Framework** ensures quality and validation

## Commands Available

- `/sparc` - Start autonomous development workflow
- `/agents` - View all 36 specialized agents  
- `/status` - Check project and infrastructure status

## Getting Started

Your SPARC enhanced project is ready for autonomous development!

1. **Define/refine your goal** using natural language
2. **Run `/sparc`** to start the autonomous workflow
3. **Monitor progress** through agent communications

---
*Powered by SPARC Enhanced v{os.environ.get('SPARC_VERSION', '2.0')} with 36 AI Agents*
*Namespace: `{namespace}` | Infrastructure: Supabase + Qdrant*
'''
    
    claude_path = Path(project_path) / 'CLAUDE.md'
    claude_path.write_text(claude_content)
    log_infrastructure('Created enhanced CLAUDE.md configuration')

async def main():
    '''Enhanced main workflow'''
    show_enhanced_banner()
    
    if not check_prerequisites():
        print('❌ Prerequisites not met. Please install missing tools.')
        return
    
    # Get project configuration
    project_config = get_project_goal()
    if not project_config:
        print('❌ Project setup cancelled')
        return
    
    # Project directory selection
    current_dir = Path(os.environ.get('ORIGINAL_DIR', os.getcwd()))
    project_type_name = PROJECT_TYPES[project_config['type']]['name']
    
    questions = [
        inquirer.List('location',
                     message=f'Where should we create your {project_type_name}?',
                     choices=[
                         f'Current directory: {current_dir}',
                         f'Desktop: {Path.home() / "Desktop"}',
                         f'Documents: {Path.home() / "Documents"}',
                         'Custom path...'
                     ])
    ]
    
    location_answer = inquirer.prompt(questions)
    if not location_answer:
        return
    
    if 'Current directory' in location_answer['location']:
        project_dir = str(current_dir)
    elif 'Desktop' in location_answer['location']:
        project_dir = str(Path.home() / 'Desktop')
    elif 'Documents' in location_answer['location']:
        project_dir = str(Path.home() / 'Documents')
    else:
        project_dir = input('Enter the full path: ').strip()
    
    # Project name
    default_name = project_config['goal'].lower().replace(' ', '-')[:30]
    project_name = input(f'Project name (default: {default_name}): ').strip() or default_name
    
    full_project_path = Path(project_dir) / project_name
    full_project_path.mkdir(parents=True, exist_ok=True)
    project_path = str(full_project_path)
    
    # Generate namespace
    abs_path = str(Path(project_path).resolve())
    path_hash = hashlib.md5(abs_path.encode()).hexdigest()[:8]
    namespace = f'{project_name}_{path_hash}'.replace('-', '_').replace(' ', '_').lower()
    
    print(f'\\n🚀 Creating enhanced SPARC project...')
    print(f'ℹ️ Project: {project_name}')
    print(f'ℹ️ Location: {project_path}')
    print(f'ℹ️ Namespace: {namespace}')
    print(f'ℹ️ Type: {project_config["type"]}')
    print()
    
    # Create project structure
    project_directories = PROJECT_TYPES[project_config['type']]['directories']
    project_directories.extend(['.sparc', '.claude', 'database'])
    
    for directory in project_directories:
        (Path(project_path) / directory).mkdir(parents=True, exist_ok=True)
    
    log_infrastructure(f'Created project structure: {project_name}')
    
    # Setup infrastructure
    setup_enhanced_infrastructure(project_path, namespace)
    
    # Setup Claude integration
    setup_claude_integration(project_path, namespace)
    
    # Create enhanced configuration files
    create_enhanced_claude_md(project_path, namespace, project_config)
    
    print()
    print('✨ \\033[0;32m\\033[1mSPARC Enhanced Project Ready!\\033[0m')
    print()
    print('\\033[0;36mNext Steps:\\033[0m')
    print('1. ⚙️ Configure your .env file with Supabase credentials')
    print('2. 🗄️ Run the database setup SQL in your Supabase project')
    print('3. 🚀 Launch Claude Code in your project:')
    print(f'   \\033[1;37mcd "{project_path}" && claude\\033[0m')
    print('4. 🧠 Start autonomous development with: \\033[1m/sparc\\033[0m')
    print()
    print('ℹ️ The 36-agent system is ready for autonomous development!')
    print(f'ℹ️ Project namespace: \\033[1m{namespace}\\033[0m')
    print()
    
    # Ask if user wants to launch Claude Code
    launch_claude = input('Launch Claude Code now? (y/N): ')
    if launch_claude.lower() == 'y':
        print('🚀 Launching Claude Code...')
        os.chdir(project_path)
        subprocess.run(['claude'], cwd=project_path)

asyncio.run(main())
"""