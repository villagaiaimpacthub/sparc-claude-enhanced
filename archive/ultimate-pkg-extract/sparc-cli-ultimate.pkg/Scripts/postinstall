#!/bin/bash

echo "🔧 Setting up SPARC CLI global commands..."

# Create symlinks for global access
ln -sf /usr/local/sparc/bin/sparc-init /usr/local/bin/sparc-init 2>/dev/null || true

# Ensure Claude Code commands directory exists
mkdir -p /usr/local/sparc/claude-commands

# Set proper permissions
chown -R root:wheel /usr/local/sparc
chmod -R 755 /usr/local/sparc
chmod +x /usr/local/sparc/bin/*

echo "🔄 Updating existing SPARC projects with fixed endpoints..."

# Find and update all existing SPARC projects
REAL_USER=$(stat -f '%Su' /dev/console)
USER_HOME=$(eval echo ~$REAL_USER)

# Search common locations for SPARC projects
SEARCH_PATHS=(
    "$USER_HOME/Desktop"
    "$USER_HOME/Documents"
    "$USER_HOME/Projects"
    "$USER_HOME/Developer"
    "$USER_HOME/Code"
    "$USER_HOME"
)

for search_path in "${SEARCH_PATHS[@]}"; do
    if [ -d "$search_path" ]; then
        # Find directories with .claude/commands/sparc.md (SPARC projects)
        find "$search_path" -name ".claude" -type d -maxdepth 3 2>/dev/null | while read claude_dir; do
            sparc_cmd="$claude_dir/commands/sparc.md"
            if [ -f "$sparc_cmd" ]; then
                project_dir=$(dirname "$claude_dir")
                echo "  📁 Updating SPARC project: $project_dir"
                
                # Update the sparc.md file with correct endpoint
                sed -i.bak 's|"$QDRANT_URL/health"|"$QDRANT_URL/"|g' "$sparc_cmd" 2>/dev/null || true
                rm -f "$sparc_cmd.bak" 2>/dev/null || true
                
                # Copy all updated commands
                cp -r /usr/local/sparc/claude-commands/* "$claude_dir/commands/" 2>/dev/null || true
                
                # Fix permissions
                chown -R "$REAL_USER":staff "$claude_dir" 2>/dev/null || true
                chmod -R 755 "$claude_dir" 2>/dev/null || true
            fi
        done
    fi
done

echo "✅ SPARC CLI installation complete!"
echo ""
echo "🎯 Updates applied:"
echo "  ✅ Global SPARC CLI system updated"
echo "  ✅ All existing SPARC projects updated with correct Qdrant endpoint"
echo "  ✅ Health checks will now show accurate status"
echo ""
echo "🎯 Next Steps:"
echo "1. Setup Supabase: /usr/local/sparc/docs/SUPABASE_SETUP.md"
echo "2. Run: sparc-init"
echo "3. Use: /sparc in Claude Code"
echo ""

# Auto-open the setup guides
echo "📖 Opening setup guides..."

# Open guides as the real user
if command -v sudo >/dev/null 2>&1 && [ "$REAL_USER" != "root" ]; then
    SUPABASE_GUIDE="/usr/local/sparc/docs/SUPABASE_SETUP.md"
    MAIN_GUIDE="/usr/local/sparc/SPARC_CLI_SETUP.md"
    
    sudo -u "$REAL_USER" open "$SUPABASE_GUIDE" 2>/dev/null || true
    sleep 2
    sudo -u "$REAL_USER" open "$MAIN_GUIDE" 2>/dev/null || true
    
    # Show success notification
    sudo -u "$REAL_USER" osascript << 'APPLESCRIPT' 2>/dev/null || true
display notification "SPARC CLI updated! All projects now have correct Qdrant endpoint." with title "SPARC CLI Updated" sound name "Glass"

delay 2

display dialog "🎉 SPARC CLI Update Complete!

✅ What's updated:
• Fixed Qdrant health check endpoint in ALL projects
• Global SPARC CLI system updated
• Setup guides opened for reference

🔧 Existing projects updated:
• All /sparc commands now use correct endpoint
• Health checks will show accurate status
• No manual fixes needed

⚠️ Next Steps:
1. Complete Supabase setup if needed (guide is open)
2. Test: /sparc in any existing project
3. You should now see ✅ Qdrant: Connected

🎯 All SPARC projects are now fully functional!" buttons {"Perfect!"} default button "Perfect!" with title "SPARC CLI - All Projects Updated" with icon note
APPLESCRIPT

fi

