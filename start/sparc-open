#!/bin/bash

# SPARC Project Opener - Navigate and Open Existing SPARC Projects
# Browse through directories to find and open existing SPARC projects

export SPARC_HOME="/usr/local/sparc"
export ORIGINAL_DIR="$(pwd)"
export SPARC_VERSION="2.0"

echo -e "${CLAUDE_BLUE}"
echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
echo "‚ïë  üöÄ SPARC AUTONOMOUS DEVELOPMENT SYSTEM ‚ú®   ‚ïë"
echo "‚ïë                                                                      ‚ïë"
echo "‚ïë  üß† 36 AI Agents  üóÑÔ∏è  Memory System  ‚öôÔ∏è  Full Infrastructure           ‚ïë"
echo "‚ïë  Version: 2.0                                                       ‚ïë"
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
echo -e "${CLAUDE_RESET}"

cd "$SPARC_HOME"

# Claude Code inspired colors
CLAUDE_GREY='\033[90m'     # Grey for secondary text
CLAUDE_WHITE='\033[97m'    # Bright white for primary text  
CLAUDE_BLUE='\033[94m'     # Pale blue for accents
CLAUDE_GREEN='\033[38;5;114m'  # Slightly brighter green
CLAUDE_RED='\033[91m'      # Light red for errors
CLAUDE_RESET='\033[0m'     # Reset colors

# Directory navigation function
browse_directories() {
    local current_dir="${1:-$HOME}"
    local selected=0
    local key
    
    while true; do
        # Get directories and SPARC projects in current location
        local dirs=()
        local sparc_projects=()
        
        # Add parent directory option (except for root)
        if [[ "$current_dir" != "/" ]]; then
            dirs+=("../")
        fi
        
        # Get subdirectories
        while IFS= read -r -d '' dir; do
            local basename=$(basename "$dir")
            if [[ ! "$basename" =~ ^\. ]]; then  # Skip hidden directories
                dirs+=("$basename/")
            fi
        done < <(find "$current_dir" -maxdepth 1 -type d ! -path "$current_dir" -print0 2>/dev/null | sort -z)
        
        # Find SPARC projects (directories with CLAUDE.md)
        while IFS= read -r -d '' project; do
            local basename=$(basename "$project")
            sparc_projects+=("$basename")
        done < <(find "$current_dir" -maxdepth 1 -name "CLAUDE.md" -exec dirname {} \; -print0 2>/dev/null | sort -z)
        
        local all_items=()
        
        # Add directories first
        for dir in "${dirs[@]}"; do
            all_items+=("üìÅ $dir")
        done
        
        # Add SPARC projects
        for project in "${sparc_projects[@]}"; do
            all_items+=("üöÄ $project (SPARC Project)")
        done
        
        # If no items, show message
        if [[ ${#all_items[@]} -eq 0 ]]; then
            all_items+=("(No directories or SPARC projects found)")
        fi
        
        # Display current directory browser
        clear
        echo -e "${CLAUDE_WHITE}‚óè Browse for SPARC Projects${CLAUDE_RESET}"
        echo ""
        echo -e "${CLAUDE_BLUE}Current location: ${CLAUDE_WHITE}$current_dir${CLAUDE_RESET}"
        echo ""
        echo -e "${CLAUDE_WHITE}Use arrow keys ‚Üë‚Üì and Enter to select (or 'q' to quit):${CLAUDE_RESET}"
        echo ""
        
        # Ensure selected is within bounds
        if [[ $selected -ge ${#all_items[@]} ]]; then
            selected=0
        fi
        
        # Display items
        for i in ${!all_items[@]}; do
            if [ $i -eq $selected ]; then
                echo -e "  ${CLAUDE_GREEN}‚óè ${all_items[$i]}${CLAUDE_RESET}"
            else
                echo -e "  ${CLAUDE_GREY}‚óã ${all_items[$i]}${CLAUDE_RESET}"
            fi
        done
        
        # Read key
        read -rsn1 key
        
        # Handle special keys
        if [[ $key == $'\x1b' ]]; then
            read -rsn2 key
            case $key in
                '[A') # Up arrow
                    ((selected--))
                    if [ $selected -lt 0 ]; then
                        selected=$((${#all_items[@]} - 1))
                    fi
                    ;;
                '[B') # Down arrow
                    ((selected++))
                    if [ $selected -ge ${#all_items[@]} ]; then
                        selected=0
                    fi
                    ;;
            esac
        elif [[ $key == '' ]]; then # Enter
            if [[ ${#all_items[@]} -eq 1 && "${all_items[0]}" == "(No directories or SPARC projects found)" ]]; then
                echo ""
                echo -e "${CLAUDE_GREY}No items to select in this directory.${CLAUDE_RESET}"
                sleep 1
                continue
            fi
            
            local selected_item="${all_items[$selected]}"
            
            if [[ "$selected_item" =~ ^üìÅ\ (.+)$ ]]; then
                # Navigate to directory
                local dir_name="${BASH_REMATCH[1]}"
                if [[ "$dir_name" == "../" ]]; then
                    current_dir=$(dirname "$current_dir")
                else
                    current_dir="$current_dir/${dir_name%/}"
                fi
                selected=0
            elif [[ "$selected_item" =~ ^üöÄ\ (.+)\ \(SPARC\ Project\)$ ]]; then
                # Open SPARC project
                local project_name="${BASH_REMATCH[1]}"
                local project_path="$current_dir/$project_name"
                echo ""
                echo -e "${CLAUDE_GREEN}‚óè Opening SPARC Project: ${CLAUDE_WHITE}$project_name${CLAUDE_RESET}"
                echo -e "${CLAUDE_GREY}Location: $project_path${CLAUDE_RESET}"
                echo ""
                echo -e "${CLAUDE_BLUE}Launching Claude Code in project directory...${CLAUDE_RESET}"
                sleep 1
                cd "$project_path"
                exec claude
                return
            fi
        elif [[ $key == 'q' ]] || [[ $key == 'Q' ]]; then # Quit
            echo ""
            echo -e "${CLAUDE_GREY}üëã Goodbye!${CLAUDE_RESET}"
            exit 0
        fi
    done
}

# Choose starting location for browsing
select_starting_location() {
    local options=(
        "Current directory"
        "Desktop" 
        "Documents"
        "Home directory"
        "Custom path..."
    )
    local paths=(
        "$ORIGINAL_DIR"
        "$HOME/Desktop"
        "$HOME/Documents"
        "$HOME"
        ""
    )
    local selected=0
    local key
    
    echo -e "${CLAUDE_WHITE}‚óè Choose starting location to browse${CLAUDE_RESET}"
    echo ""
    echo -e "${CLAUDE_BLUE}Where should we start looking for SPARC projects?${CLAUDE_RESET}"
    echo ""
    
    # Function to display menu
    display_location_menu() {
        clear
        echo -e "${CLAUDE_WHITE}‚óè Choose starting location to browse${CLAUDE_RESET}"
        echo ""
        echo -e "${CLAUDE_BLUE}Where should we start looking for SPARC projects?${CLAUDE_RESET}"
        echo ""
        echo -e "${CLAUDE_WHITE}Use arrow keys ‚Üë‚Üì and Enter to select (or 'q' to quit):${CLAUDE_RESET}"
        
        for i in ${!options[@]}; do
            if [ $i -eq $selected ]; then
                if [ $i -lt 4 ]; then
                    echo -e "  ${CLAUDE_GREEN}‚óè ${options[$i]} ${CLAUDE_GREY}(${paths[$i]})${CLAUDE_RESET}"
                else
                    echo -e "  ${CLAUDE_GREEN}‚óè ${options[$i]}${CLAUDE_RESET}"
                fi
            else
                if [ $i -lt 4 ]; then
                    echo -e "  ${CLAUDE_GREY}‚óã ${options[$i]} (${paths[$i]})${CLAUDE_RESET}"
                else
                    echo -e "  ${CLAUDE_GREY}‚óã ${options[$i]}${CLAUDE_RESET}"
                fi
            fi
        done
    }
    
    # Display menu initially
    display_location_menu
    
    while true; do
        # Read key
        read -rsn1 key
        
        # Handle special keys
        if [[ $key == $'\x1b' ]]; then
            read -rsn2 key
            case $key in
                '[A') # Up arrow
                    ((selected--))
                    if [ $selected -lt 0 ]; then
                        selected=$((${#options[@]} - 1))
                    fi
                    display_location_menu
                    ;;
                '[B') # Down arrow
                    ((selected++))
                    if [ $selected -ge ${#options[@]} ]; then
                        selected=0
                    fi
                    display_location_menu
                    ;;
            esac
        elif [[ $key == '' ]]; then # Enter
            break
        elif [[ $key =~ ^[1-5]$ ]]; then # Direct number input
            selected=$((key - 1))
            break
        elif [[ $key == 'q' ]] || [[ $key == 'Q' ]]; then # Quit
            echo ""
            echo -e "${CLAUDE_GREY}üëã Goodbye!${CLAUDE_RESET}"
            exit 0
        fi
    done
    
    echo ""
    if [ $selected -lt 4 ]; then
        STARTING_DIR="${paths[$selected]}"
        echo -e "${CLAUDE_GREEN}‚óè ${options[$selected]} ${CLAUDE_GREY}(${paths[$selected]})${CLAUDE_RESET}"
    else
        echo -e "${CLAUDE_GREEN}‚óè ${options[$selected]}${CLAUDE_RESET}"
        echo ""
        echo -e -n "${CLAUDE_GREY}Enter the full path: ${CLAUDE_RESET}"
        read STARTING_DIR
        if [[ ! -d "$STARTING_DIR" ]]; then
            echo -e "${CLAUDE_RED}Directory does not exist, using home directory instead.${CLAUDE_RESET}"
            STARTING_DIR="$HOME"
        fi
    fi
    echo ""
}

# Start the directory browser
select_starting_location
browse_directories "$STARTING_DIR"

exit 0